Andremo a scrivere i componenti di base usando un'altra libreria che si chiama styled components.
serve a utilizzare il css dentro il file javascript:

https://styled-components.com/docs/basics

npm install styled-components

Davide non è un grande fan perché non ne vede tutta questa utilità. Secondo lui i moduli css risolvono tante di queste problematiche.

Togliamo tutti gli stili css dalla nostra app (index e App)

Abbiamo bisogno di react router per 2 routes. È una libreria che viene utilizzata molto spesso. 
ci servirà per passare lat e long per andare a prendere i dati meteo in questo sito:
https://openweathermap.org/

- faccio il mio primo router: AppRouter.jsx
    avrò bisogno di due rotte, una nella home, una per mostrare una Città Specifica. Avrò anche 2 componenti iniziali:
    Home e SelectedCity. ltre a 'city' passeremo nell'url due parametri per lat e long

- poi faccio Error e NotFound, importo tutto..

Come posso passare alla route lat e long?
È sufficiente utilizzare un altro hook di react router direttamente dentro alla route (SelectedCityRoute) ---> hook useSearchParams
è un oggetto che rappresenta tutti i parametri che vengono messi dopo il punto interrogatico. 
Questa è la logica di routing, non ci servirà nient'altro. 

Poi sulla base delle informazioni che andiamo a prendere dall'url chiamiamo una fetch per andare a prendere tutte le informazioni nelle api del sito. 

STYLED COMPONENTS:
un po' come per i moduli. con SC abbiamo il css collegato con il componente che vogliamo utilizzare.
E possiamo mettere del javascript all'interno della nostra definizione del css

Funziona in un modo strano. vedi CityList
Non ci sono dei tag html. è come se ci fossero dei componenti, ma non come file js che vengono importati, sono definiti sopra la pagina.
Dobbiamo dare un nome ad un componente da applicare e dargli uno stile.
Poi ci sono tante cose che possiamo fare, ad esempio passando delle props. 
Es usando operatori ternari... fare prove

dentro ad advance fa vedere che possiamo usare dei temi. Come react ha useContext e useProvider, anche SC ha un suo provider in cui possiamo fornire un file a tutta l'app. Questo ci consente di avere uno stile generico (cartella styles --> Global Style), e stili specifici dentro al componente. 

un altra funzionalità è di avere dei temi diversi, come un light theme, o un dark theme. Il tema può essere importato dove  ci serve. Mettiamo che ho centinaia di componenti, la cosa più semplice è utilizzare il provider:

<ThemeProvider> che wrappa l'app. 

Il vantaggio è che potrei fornire un file con le stesse proprietà ma con dei valori diversi. 
Nel file theme è un po' come se definissimo le variabili di css
Anche con un file diventa semplice andar a cambiare un determinato stile. (es andare a cambiare tutti i rossi nell'app)

abbiamo installato le librerie (nanoid, etc..) 
    "@reduxjs/toolkit": "^2.2.7",
    "date-fns": "^3.6.0",
    "nanoid": "^5.0.7",

Definiamo lo stile.

Definiamo i componenti.. dai più piccoli 

libreria per componenti react:
https://mui.com/
https://ant.design/

spiegazione logica CityList:

Il filtro delle città servirà per filtrare l'elenco: quando andrò a scrivere qualcosa filtro l'elenco utilizzando Redux, nel senso che dentro Redux ci sarà una stringa che rappresenta quello che ho digitato all'interno dell'input, per questo come valore ho messo filters, che è il valore che arriverà da Redux. 
Quando scrivo qualcosa la proprietà onChange chiama handleInputChange e mi dice se c'è una inputAction (un'azione che arriva dall'esterno) la triggero, altrimenti gestisco localmente ( localInputValue)

Funzione di setting su 'Add City': vado a switchare il booleano e quando l'input è visibile lo mostro. In questo caso (aggiunta città) non ho bisogno di usare uno stato, ma solo le azioni che voglio far fare a quel pulsante, quindi in questo caso inputForm si baserà sul suo stato locale. Posso gestirlo sia internamente sia passandogli le props.   

Elenco città filtrate: CityListItem

Importiamo il componente CityListItem in CityList.
Con un if facciamo un controllo sulla lista delle città filtrate: andiamo a vedere che ci siano delle città filtrate dentro la lista (array.length > 0), a quel punto vado a mappare la lista, vado a prendere ogni singola città e ritorno il componente, a cui passo le info meteo della città, un id e una funzione per cancellare la città. E da gestire un 'emptystate': quando non trovo niente ritorno un componente che riporto solo come div con del testo. 

***********

faccio i file mock..

in React c'è la possibilità di salvare le nostre variabili in un file che sta nella root del progetto e questo file si chiama .env

date fns 
è una liberia per le date.
https://date-fns.org/

vedi documentazione radux toolkit RTK query
Serve per fare il fetch e la cache di dati. 

Finora avevamo usato uno useEffect
Un piccolo problema è che se clicco da qualche parte e torno indietro richiamo le Api di nuovo. Spesso le chiamate sono a pagamento, è buona prassi farle solo quando serve.
Potrei quindi gestire una cache: se ho già questi dati non vado a prenderli di nuovo. Una cache ha anche una scadenza. RTK Query si occupa non solo della fetch ma anche della cache. pOSSIamo anche dirgli per quanto tempo ( default 60 sec) 
Ci sono tansissimi parametri di configurazione. C'è anche la gestione degli errori. con useEffect oltre ai fetch dobbiamo gestire anche i catch, tytte casistiche mappate da rtk query.

Di base si importa uno createApi --> vedi basic usage. 
Fa vedere come creare un file.. tutto poi viene inserito all'interno dello store. Mettiamo un oggetto, con il puntamento al reducer. 

la cache è una logica interna a redux. che vede se nella mia chiamata ci sono già dei dati, non li richiama. C'è anche uhn timestamp, quindi la cache (logica della cache) va a controllarlo e quando il valore che ho messo è passato allora vado a effettuare una nuova fetch. È tutta una logica interna a RTK query. 

Ho altre proprietà che posso richiamare, tra cui quella di errore e is loading. (casistiche che con useEffect venivano gestite manualmente.  )

